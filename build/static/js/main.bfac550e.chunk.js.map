{"version":3,"sources":["components/TOC.js","components/Subject.js","components/Content.js","App.js","serviceWorker.js","index.js"],"names":["TOC","props","lists","tocData","data","i","length","push","role","class","href","id","title","Subject","sub","Content","data-html","desc","App","useState","ss_Subject","ss_Content","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+OAqBiBA,MAnBjB,SAAaC,GAIT,IAHA,IAAIC,EAAM,GACNC,EAAUF,EAAMG,KAChBC,EAAI,EACFA,EAAEF,EAAQG,QAEZJ,EAAMK,KAAK,uBAAGC,KAAK,WAAWC,MAAM,OAAOC,KAAM,WAAWP,EAAQE,GAAGM,IAAKR,EAAQE,GAAGO,QACvFP,IAEJ,OACE,yBAAKG,KAAK,OAAOC,MAAM,mBACnB,yBAAKD,KAAK,WAAWC,MAAM,QAAO,wCAC9B,yBAAKA,MAAM,QACJP,MCLNW,MARf,SAAiBZ,GACf,OACE,gCACI,wBAAIQ,MAAM,0BAA0BR,EAAMW,OAC5C,yBAAKH,MAAM,uBAAsB,wBAAIA,MAAM,aAAaR,EAAMa,QCSnDC,MAbjB,SAAiBd,GACb,OACI,yBAAKQ,MAAM,UAAUO,YAAU,6OAC7B,yBAAKP,MAAM,WACT,yBAAKA,MAAM,UAAUR,EAAMW,OACzB,yBAAKH,MAAM,eACRR,EAAMgB,OAGX,4BAAQR,MAAM,uBAAd,S,MCsBGS,MA1Bf,WAAe,MAGsBC,mBACjC,CACEP,MAAM,MACNE,IAAI,oBANK,mBAGLM,EAHK,aASuBD,mBACjC,CACC,CAACR,GAAK,EAAGC,MAAM,OAAOK,KAAK,wBAC3B,CAACN,GAAK,EAAGC,MAAM,MAAMK,KAAK,qBAC1B,CAACN,GAAK,EAAGC,MAAM,aAAaK,KAAK,aACjC,CAACN,GAAK,EAAGC,MAAM,KAAKK,KAAK,sBAdhB,mBASJI,EATI,KAkBb,OAlBa,KAmBX,yBAAKC,UAAU,OACX,kBAAC,EAAD,CAASV,MAAOQ,EAAWR,MAAOE,IAAKM,EAAWN,MAClD,kBAAC,EAAD,CAAKV,KAAMiB,IACX,kBAAC,EAAD,CAAST,MAAQ,OAAOK,KAAM,iLCjBlBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bfac550e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction TOC(props) {  \r\n    var lists=[];\r\n    var tocData = props.data;\r\n    var i = 0;\r\n    while(i<tocData.length)\r\n    {\r\n        lists.push(<a role=\"listitem\" class=\"item\" href={\"/content\"+tocData[i].id}>{tocData[i].title}</a>);\r\n        i++;\r\n    }\r\n    return (\r\n      <div role=\"list\" class=\"ui ordered list\">\r\n          <div role=\"listitem\" class=\"item\"><a>Languages</a>\r\n              <div class=\"list\">\r\n                    {lists}\r\n                </div>\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n  export default TOC;","import React from 'react';\r\n\r\nfunction Subject(props) {\r\n  return (\r\n    <header>\r\n        <h1 class=\"ui top attached header\">{props.title}</h1>\r\n      <div class=\"ui attached segment\"><h2 class=\"ui header\">{props.sub}</h2></div></header>\r\n   )\r\n}\r\n\r\nexport default Subject;\r\n\r\n","import React from 'react';\r\n\r\nfunction Content(props) {\r\n    return (\r\n        <div class=\"ui card\" data-html=\"<div class='header'>User Rating</div><div class='content'><div class='ui star rating'><i class='active icon'></i><i class='active icon'></i><i class='active icon'></i><i class='active icon'></i><i class='active icon'></i></div></div>\">\r\n          <div class=\"content\">\r\n            <div class=\"header\">{props.title}</div>\r\n              <div class=\"description\">\r\n                {props.desc}\r\n              </div>\r\n            </div>\r\n            <button class=\"ui red basic button\">Red</button>\r\n      </div>\r\n    );\r\n  }\r\n  export default Content;","import React ,{useState}from 'react';\nimport TOC from './components/TOC';\nimport Subject from './components/Subject';\nimport Content from './components/Content';\n//import TeachableMachine from './components/TeachableMachine';\nimport './App.css';\n\nfunction App() {\n  \n  //state 초기화\n   const [ss_Subject,ss_setSubject] =useState\n   ({\n      title:'WEB',\n      sub:'World Wide Web!'\n    });\n\n    const [ss_Content,ss_SetContent] =useState\n    ([\n      {id : 1, title:'HTML',desc:'HTML is HyperText...'},\n      {id : 2, title:'CSS',desc:'CSS is for design'},\n      {id : 3, title:'JavaScript',desc:'JS is Web'},\n      {id : 4, title:'ML',desc:'MechineLearning'},\n      ]\n    );\n\n  return (\n    <div className=\"App\">      \n        <Subject title={ss_Subject.title} sub={ss_Subject.sub}></Subject>\n        <TOC data={ss_Content}></TOC>\n        <Content title = \"HTML\" desc= \"Two sisters move to the country with their father in order to be closer to their hospitalized mother, and discover the surrounding trees are inhabited by magical spirits.\"></Content>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'semantic-ui-css/semantic.min.css'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}